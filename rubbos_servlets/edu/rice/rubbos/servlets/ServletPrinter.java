/**
 * RUBBoS: Rice University Bulletin Board System.
 * Copyright (C) 2001-2004 Rice University and French National Institute For 
 * Research In Computer Science And Control (INRIA).
 * Contact: jmob@objectweb.org
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or any later
 * version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 * Initial developer(s): Emmanuel Cecchet.
 * Contributor(s): ______________________.
 */

package edu.rice.rubbos.servlets;

import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.UnknownHostException;
import java.sql.Connection;

import java.util.GregorianCalendar;
import java.util.Properties;

import javax.servlet.http.HttpServletResponse;


import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.Mongo;

import edu.rice.rubbos.db.MongoDb;

import me.prettyprint.cassandra.model.CqlQuery;
import me.prettyprint.cassandra.model.CqlRows;
import me.prettyprint.cassandra.serializers.BytesArraySerializer;
import me.prettyprint.cassandra.serializers.LongSerializer;
import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.hector.api.Cluster;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.beans.OrderedRows;
import me.prettyprint.hector.api.factory.HFactory;
import me.prettyprint.hector.api.query.QueryResult;
import me.prettyprint.hector.api.beans.Row;
import me.prettyprint.hector.api.beans.ColumnSlice;


/**
 * In fact, this class is not a servlet itself but it provides output services
 * to servlets to send back HTML files.
 * 
 * @author <a href="mailto:cecchet@rice.edu">Emmanuel Cecchet </a> and <a
 *         href="mailto:julie.marguerite@inrialpes.fr">Julie Marguerite </a>
 * @version 1.0
 */

public class ServletPrinter
{
	private PrintWriter       out;
	private String            servletName;
	private GregorianCalendar startDate;
	/*//Cassandra
	private Cluster            myCluster;
	private Keyspace           myKeySpace;

	//MongoDb
	private Mongo m ;
	private DB db;

	private StringSerializer stringSerializer; 
	private LongSerializer longSerializer;
	private BytesArraySerializer bas;
	private Properties properties;*/

	public ServletPrinter(HttpServletResponse toWebServer,
			String callingServletName)
	{
		startDate = new GregorianCalendar();
		toWebServer.setContentType("text/html");
		try
		{
			out = toWebServer.getWriter();
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		servletName = callingServletName;
	}

	/*private void initCassandra() {
		myCluster = HFactory.getOrCreateCluster("Test Cluster", "127.0.0.1:9160"); 	
		myKeySpace = HFactory.createKeyspace("tutorial", myCluster);
		stringSerializer = StringSerializer.get(); 
		longSerializer = LongSerializer.get(); 
		bas = BytesArraySerializer.get();  
	}

	private void initMongoDb() throws UnknownHostException{	  
		m = new Mongo( properties.getProperty("host") );
		db = m.getDB( properties.getProperty("db") );	
		dbClient = new MongoDb(m, db);
	}*/

	public void printFile(String filename)
	{
		FileReader fis = null;
		try
		{
			fis = new FileReader(filename);
			char[] data = new char[4 * 1024]; // 4K buffer
			int bytesRead;
			bytesRead = fis.read(data);
			while (/* (bytesRead = fis.read(data)) */bytesRead != -1)
			{
				out.write(data, 0, bytesRead);
				bytesRead = fis.read(data);
			}
		}
		catch (Exception e)
		{
			out.println("Unable to read file (exception: " + e + ")<br>");
		}
		finally
		{
			if (fis != null)
				try
			{
					fis.close();
			}
			catch (Exception ex)
			{
				out.println("Unable to close the file reader (exception: " + ex
						+ ")<br>");
			}
		}
	}

	public void printHTMLheader(String title)
	{
		printFile(Config.HTMLFilesPath + "/header.html");
		out.println("<title>" + title + "</title>");
	}

	public void printHTMLfooter()
	{
		GregorianCalendar endDate = new GregorianCalendar();

		out
		.println("<br><hr>RUBBoS (C) Rice University/INRIA<br><i>Page generated by "
				+ servletName
				+ " in "
				+ TimeManagement.diffTime(startDate, endDate) + "</i><br>");
		out.println("</body>");
		out.println("</html>");
	}

	public void printHTML(String msg)
	{
		out.println(msg);
	}

	public void printHTMLHighlighted(String msg)
	{
		out.println("<TABLE width=\"100%\" bgcolor=\"#CCCCFF\">");
		out
		.println("<TR><TD align=\"center\" width=\"100%\"><FONT size=\"4\" color=\"#000000\"><B>"
				+ msg + "</B></FONT></TD></TR>");
		out.println("</TABLE><p>");
	}

}
